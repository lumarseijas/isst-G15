package com.reserva.controller;

import com.reserva.model.Usuario;
import com.reserva.repository.UsuarioRepository;
import com.reserva.security.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.view.RedirectView;

@RestController
public class AuthController {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @GetMapping("/auth/success")
    public RedirectView loginSuccess(@AuthenticationPrincipal OAuth2User principal) {
        String email = principal.getAttribute("email");
        String nombre = principal.getAttribute("name");

        // 1. Buscar o registrar al usuario
        Usuario usuario = usuarioRepository.findByEmail(email)
                .orElseGet(() -> {
                    Usuario nuevo = new Usuario();
                    nuevo.setEmail(email);
                    nuevo.setNombre(nombre);
                    nuevo.setTipo(Usuario.TipoUsuario.CLIENTE_ONLINE); // o lo que necesites por defecto
                    return usuarioRepository.save(nuevo);
                });

        // 2. Generar JWT
        String token = jwtUtil.generateToken(usuario.getEmail());

        // 3. Redirigir al frontend con el token y el usuario como parÃ¡metros
        String redirectUrl = String.format("http://localhost:5173/auth?token=%s&nombre=%s&email=%s",
                token,
                usuario.getNombre().replace(" ", "%20"),
                usuario.getEmail());

        return new RedirectView(redirectUrl);
    }
}
